/**
 * Created by 520 on 2016/12/16.
 */
// 作用域（scope）指的是变量存在的范围。Javascript只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；
// 另一种是函数作用域，变量只在函数内部存在。
// 在函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。
var v1 = 1;

function fgv(){
    console.log(v1);
}

fgv()
// 1
// 上面的代码表明，函数f内部可以读取全局变量v。
//

// 在函数内部定义的变量，外部无法读取，称为“局部变量”（local variable）。
function flv(){
    var v2 = 1;
}

v2 // ReferenceError: v is not defined
// 上面代码中，变量v在函数内部定义，所以是一个局部变量，函数之外就无法读取。
//

// 函数内部定义的变量，会在该作用域内覆盖同名全局变量
var v3 = 1;

function f3(){
    var v3 = 2;
    console.log(v3);
}

f() // 2
v3 // 1
// 上面代码中，变量v同时在函数的外部和内部有定义。结果，在函数内部定义，局部变量v覆盖了全局变量v。
//

// 注意，对于var命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量
if (true) {
    var x = 5;
}
console.log(x);  // 5
// 上面代码中，变量x在条件判断区块之中声明，结果就是一个全局变量，可以在区块之外读取。

// 函数内部的变量提升
// 与全局作用域一样，函数作用域内部也会产生“变量提升”现象。var命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。
function foo(x) {
    if (x > 100) {
        var tmp = x - 100;
    }
}
// 上面的代码等同于
//
// function foo(x) {
//     var tmp;
//     if (x > 100) {
//         tmp = x - 100;
//     };
// }
// 函数本身的作用域
// 函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。

var a = 1;
var x = function () {
    console.log(a);
};

function f() {
    var a = 2;
    x();
}

f() // 1
// 上面代码中，函数x是在函数f的外部声明的，所以它的作用域绑定外层，内部变量a不会到函数f体内取值，所以输出1，而不是2。
//
// 总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。
//
// 很容易犯错的一点是，如果函数A调用函数B，却没考虑到函数B不会引用函数A的内部变量。
var x1 = function () {
    console.log(a111);
};

function y1(f) {
    var a111 = 2;
    f();
}

y1(x1)
// ReferenceError: a111 is not defined